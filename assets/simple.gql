type Query {
  deity (name: [[[[[String!]]!]]], mythology: Realm): Deity!
  character (characterID: String! , age: Int ): Character!
  hero: Human!
}

interface MyInterface {
    name: String
}

type Mutation {
  createDeity (name: [[[[[String!]]!]]], mythology: String): Deity!
  createCharacter (realm: Realm! , id: String! ): Character!
}

union Character = Creature | Deity  | Human

type Deity {
  fullName: String!
  power: Power
}

type Creature {
  creatureName: String!
  realm: City!
}

type Human {
  humanName: String!
  lifetime: Lifetime!
  profession: Profession
}

enum Profession {
    Priest
    Farmer
    Artist
}

input Realm {
  owner: String!
  age: Int
  realm: Realm
  profession: Profession
}

enum City {
    Athens
    Ithaca
    Sparta Troy
}

scalar Lifetime
scalar Power