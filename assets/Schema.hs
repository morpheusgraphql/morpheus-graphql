{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeFamilies      #-}

-- generated by 'Morpheus' CLI
module Schema
  ( rootResolver
  ) where

import           Data.Morpheus.Kind  (ENUM, INPUT_OBJECT, OBJECT, SCALAR, UNION)
import           Data.Morpheus.Types (GQLRootResolver (..), GQLType (..), ResM, StreamM)
import           Data.Text           (Text)
import           GHC.Generics        (Generic)

rootResolver :: GQLRootResolver IO () Query Mutation ()
rootResolver =
  GQLRootResolver {queryResolver = resolveQuery, mutationResolver = resolveMutation, subscriptionResolver = return ()}

---- GQL Query -------------------------------
data Query = Query
  { deity     :: ArgDeity -> ResM Deity
  , character :: ArgCharacter -> ResM Character
  } deriving (Generic)

data ArgDeity = ArgDeity
  { name      :: Maybe [Maybe [Maybe [[Maybe [Text]]]]]
  , mythology :: Maybe Text
  } deriving (Generic)

data ArgCharacter = ArgCharacter
  { characterID :: Text
  , age         :: Maybe Int
  } deriving (Generic)

instance GQLType Query where
  type KIND Query = OBJECT

resolveQuery :: ResM Query
resolveQuery = return Query {deity = const resolveDeity, character = const resolveCharacter}

---- GQL Mutation -------------------------------
data Mutation = Mutation
  { createDeity     :: ArgCreateDeity -> ResM Deity
  , createCharacter :: ArgCreateCharacter -> ResM Character
  } deriving (Generic)

data ArgCreateDeity = ArgCreateDeity
  { deityName      :: Maybe [Maybe [Maybe [[Maybe [Text]]]]]
  , deityMythology :: Maybe Text
  } deriving (Generic)

data ArgCreateCharacter = ArgCreateCharacter
  { charRealm :: Realm
  , charMutID :: Text
  } deriving (Generic)

instance GQLType Mutation where
  type KIND Mutation = OBJECT

resolveMutation :: StreamM () Mutation
resolveMutation = return Mutation {createDeity = const resolveDeity, createCharacter = const resolveCharacter}

---- GQL City -------------------------------
data City
  = Athens
  | Ithaca
  | Sparta
  | Troy
  deriving (Generic)

instance GQLType City where
  type KIND City = ENUM

resolveCity :: ResM City
resolveCity = return Athens

---- GQL Power -------------------------------
data Power =
  Power Int
        Int

instance GQLType Power where
  type KIND Power = SCALAR

resolvePower :: ResM Power
resolvePower = return $ Power 0 0

---- GQL Realm -------------------------------
data Realm = Realm
  { owner :: Text
  , place :: Maybe Int
  } deriving (Generic)

instance GQLType Realm where
  type KIND Realm = INPUT_OBJECT

---- GQL Deity -------------------------------
data Deity = Deity
  { fullName :: () -> ResM Text
  , power    :: () -> ResM (Maybe Text)
  } deriving (Generic)

instance GQLType Deity where
  type KIND Deity = OBJECT

resolveDeity :: ResM Deity
resolveDeity = return Deity {fullName = const $ return "", power = const $ return Nothing}

---- GQL Creature -------------------------------
data Creature = Creature
  { creatureName :: () -> ResM Text
  , abilities    :: () -> ResM (Maybe Text)
  } deriving (Generic)

instance GQLType Creature where
  type KIND Creature = OBJECT

resolveCreature :: ResM Creature
resolveCreature = return Creature {creatureName = const $ return "", abilities = const $ return Nothing}

---- GQL Human -------------------------------
data Human = Human
  { humanName  :: () -> ResM Text
  , profession :: () -> ResM (Maybe Text)
  } deriving (Generic)

instance GQLType Human where
  type KIND Human = OBJECT

resolveHuman :: ResM Human
resolveHuman = return Human {humanName = const $ return "", profession = const $ return Nothing}

---- GQL Character -------------------------------
data Character
  = Character_CREATURE Creature
  | Character_DEITY Deity
  | Character_HUMAN Human
  deriving (Generic)

instance GQLType Character where
  type KIND Character = UNION

resolveCharacter :: ResM Character
resolveCharacter = Character_CREATURE <$> resolveCreature
