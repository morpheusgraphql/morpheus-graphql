# for Input Union

input Cat @testDir {
  name: String!
}

input Dog {
  name: String! @inputDirective(testName: "")
}

input Bird {
  name: String
}

# Main APi

"""
id of city
"""
enum CityID @enumDir {
  """
  temporary multiline Test for Enum field descripions
  """
  Paris
  BLN @deprecated(reason: "some reason")
  "temporary singleline Test for Enum field descripions"
  HH @deprecated(reason: "just for test")
}

input Coordinates {
  latitude: Euro! @customDirective(testName: "")
  "temporary singleline Test for input object field descripions"
  longitude: [[[UniqueID!]!]]!
}

input UniqueID {
  """
  temporary multiline Test for Enum field descripions
  """
  type: String = "test default value"
  id: String!
  rec: UniqueID
}

type Address @typeDirective(id: 1) {
  """
  temporary multiline Test for Enum field descripions
  """
  city: String! @deprecated(reason: "some reason")
  street: String!
  "temporary singleline Test for input object field descripions"
  houseNumber: Int! @deprecated
}

"""
my custom description for user
"""
type User {
  name: String!
  """
  some email adress
  name@email.com
  """
  email: String!
  address(
    """
    temporary multiline Test for
    arguments
    descripions
    """
    coordinates: Coordinates! @argsDirective(id: 1)
    "temporary singleline Test for input object field descripions"
    comment: String = "test default value"
  ): Address!
  home: CityID!
  office(zipCode: [[[ID!]]!], id: CityID!): Address
  entity: [MyUnion!]!
}

union MyUnion = User | Address

type Query {
  user: User!
  animal(animal: Animal): String!
  wrapped1(type: UniqueID): AIntText!
  wrapped2: AText!
  set: SetInt!
  someMap: MapTextInt!
  fail1: Int!
  fail2: Int!
  shared: SharedType!
}

type Mutation {
  createUser: User!
  createAddress: Address!
  setAdress: Address!
}

type Subscription {
  newAddress: Address!
  newUser: User!
}
