{-# LANGUAGE FlexibleContexts  #-}
{-# LANGUAGE NamedFieldPuns    #-}
{-# LANGUAGE OverloadedStrings #-}

module Data.Morpheus.Document.RenderHaskell
  ( renderHaskellDocument
  ) where

import           Data.ByteString.Lazy.Char8              (ByteString)
import           Data.Semigroup                          ((<>))
import           Data.Text                               (Text, intercalate, pack)
import qualified Data.Text                               as T (concat)
import qualified Data.Text.Lazy                          as LT (fromStrict)
import           Data.Text.Lazy.Encoding                 (encodeUtf8)

-- MORPHEUS
import           Data.Morpheus.Document.Rendering.Terms  (renderExtension)
import           Data.Morpheus.Document.Rendering.Types  (renderType)
import           Data.Morpheus.Document.Rendering.Values (renderResolver, renderRootResolver)
import           Data.Morpheus.Types.Internal.Data       (DataTypeLib (..), allDataTypes)

data Context = Context
  { moduleName :: Text
  , imports    :: [(Text, [Text])]
  , extensions :: [Text]
  , scope      :: Text
  }

renderHaskellDocument :: String -> DataTypeLib -> ByteString
renderHaskellDocument modName lib =
  encodeText $
  renderLanguageExtensions context <> renderExports context <> renderImports context <> renderRootResolver lib <> types
  where
    encodeText = encodeUtf8 . LT.fromStrict
    types = intercalate "\n\n" $ map (renderType <> const "\n\n" <> renderResolver) (allDataTypes lib)
    context =
      Context
        { moduleName = pack modName
        , imports =
            [ ("GHC.Generics", ["Generic"])
            , ("Data.Morpheus.Kind", ["SCALAR", "ENUM", "INPUT_OBJECT", "OBJECT", "UNION"])
            , ( "Data.Morpheus.Types"
              , ["GQLRootResolver(..)", "IORes", "IOMutRes", "IOSubRes", "SubRootRes", "GQLType(..)"])
            , ("Data.Text", ["Text"])
            ]
        , extensions = ["OverloadedStrings", "DeriveGeneric", "TypeFamilies"]
        , scope = "Main"
        }

renderLanguageExtensions :: Context -> Text
renderLanguageExtensions Context {extensions} = T.concat (map renderExtension extensions) <> "\n"

renderExports :: Context -> Text
renderExports Context {moduleName} =
  "-- generated by 'Morpheus' CLI\n" <> "module " <> moduleName <> " (rootResolver) where\n\n"

renderImports :: Context -> Text
renderImports Context {imports} = T.concat (map renderImport imports) <> "\n"
  where
    renderImport (src, list) = "import  " <> src <> "  (" <> intercalate ", " list <> ")\n"
